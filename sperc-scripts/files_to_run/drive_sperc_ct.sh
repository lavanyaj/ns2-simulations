#! /bin/bash 

declare -a ENV_VARS_STR=("PERC_RUN_INSTANCES" "PERC_RUN_SCRIPTS" "PERC_NS2_BINARY" )

for ENV_VAR_STR in "${ENV_VARS_STR[@]}" ; do
    if [[ -z "${!ENV_VAR_STR}" ]]; then
	echo "env var ${ENV_VAR_STR} not defined."
	exit -1;
    else
	echo "env var ${ENV_VAR_STR} : ${!ENV_VAR_STR}."
    fi
done;

if [ $# -lt 8 ] ; then
    echo "$0: Not enough parameters. Expected 5 (flows_input suffix max_sim_time num_servers b4|spine-leaf link_rate keyword log_queues), got $#." 1>&2;
    exit 1;
else
    echo "$0: Got parameters. flows_input $1 suffix $2 max_sim_time $3 num_servers $4 topology_type $5 link_rate $6 keyword $7 log_queues $8." 
fi;

DS=$PWD

FLOWS_INPUT=${1};UNIQUE_ID=$2;MAX_SIM_TIME=${3}; NUM_ACTIVE_SERVERS=${4};
EXPERIMENT="ct"; SIM_END=100000; LOAD=0; CONNECTIONS_PER_PAIR=1;
CDF=0;MEAN_FLOW_SIZE=0; FLOW_SIZE_DISTRIBUTION="custom"; PARETO_SHAPE=0; LOG_QUEUES="mon3-q.tcl";
LOG_AGENTS="mon3-a.tcl";TRACE_QUEUES=0;LINK_RATE=100;TOPOLOGY_X=1;QUEUE_SAMPLING_INTVAL=0.001; PKTSIZE=1500;
REQUESTED_TOPOLOGY_TYPE=${5}
REQUESTED_LINK_RATE=${6};
REQUESTED_KW=$7

# queue stuff that we don't use or change
# QUEUE_THRESHOLD=${29}
# USE_STRETCH=${30}
# RCP_ALPHA=${31}
# RCP_BETA=${32}
# RCP_INIT_RTT=${33} replace with Queue log interval

echo "UNIQUE_ID=${UNIQUE_ID}; NUM_ACTIVE_SERVERS=${NUM_ACTIVE_SERVERS}; FLOWS_INPUT=${FLOWS_INPUT}"

if [ "${REQUESTED_TOPOLOGY_TYPE}" == "b4" ]; then
    LOG_AGENTS="common/mon3-a.tcl"
    LOG_QUEUES="common/mon3-q.tcl"
elif [ "${REQUESTED_TOPOLOGY_TYPE}" == "spine-leaf" ]; then
    LOG_AGENTS="common/mon2-a.tcl"
    LOG_QUEUES="common/mon2-q.tcl"
else
    echo "No configurations to run s-PERC in ${REQUESTED_TOPOLOGY_TYPE} topology."
    exit
fi;

LOG_QUEUES=$8

    declare -a versions=(
# This is a version for running in WAN, see that maxsat_timeout is 100ms, max_rtt_timeout is 500ms, no priority
	"LINK_RATE=100; PKTSIZE=1500000; QUEUE_SIZE=83; MEAN_LINK_DELAY=0.0000002; HOST_DELAY=0.0000025;  TOPOLOGY_TYPE=\"b4\"; SPERC_CONTROL_TRAFFIC_PC=4; SPERC_HEADROOM_PC=2; SPERC_MAXSAT_TIMEOUT=0.1; SPERC_MAXRTT_TIMEOUT=0.5; SPERC_SYN_RETX_PERIOD_SECONDS=0.2; SPERC_FIXED_RTT_ESTIMATE_AT_HOST=0.1; SPERC_CONTROL_PKT_HDR_BYTES=64; SPERC_DATA_PKT_HDR_BYTES=40; SPERC_INIT_SPERC_DATA_INTERVAL=-1; MATCH_DEMAND_TO_FLOW_SIZE=0; SPERC_PRIO_WORKLOAD=0; SPERC_PRIO_THRESH_INDEX=0; SPERC_WEIGHTED_MAX_MIN_NUM_CLASSES=1; SPERC_JITTER=0.000001; SPERC_UPDATE_IN_REV=0; KW=\"b4-100G-1500KB\""    
	"LINK_RATE=10; PKTSIZE=1500; QUEUE_SIZE=83; MEAN_LINK_DELAY=0.0000002; HOST_DELAY=0.0000025; TOPOLOGY_TYPE=\"b4\"; SPERC_CONTROL_TRAFFIC_PC=4; SPERC_HEADROOM_PC=2; SPERC_MAXSAT_TIMEOUT=0.1; SPERC_MAXRTT_TIMEOUT=0.5; SPERC_SYN_RETX_PERIOD_SECONDS=0.2; SPERC_FIXED_RTT_ESTIMATE_AT_HOST=0.1; SPERC_CONTROL_PKT_HDR_BYTES=64; SPERC_DATA_PKT_HDR_BYTES=40; SPERC_INIT_SPERC_DATA_INTERVAL=-1; MATCH_DEMAND_TO_FLOW_SIZE=0; SPERC_PRIO_WORKLOAD=0; SPERC_PRIO_THRESH_INDEX=0; SPERC_WEIGHTED_MAX_MIN_NUM_CLASSES=1; SPERC_JITTER=0; SPERC_UPDATE_IN_REV=0; KW=\"b4-10G-1500B-j0\""    
	"LINK_RATE=1; PKTSIZE=1500; QUEUE_SIZE=83; MEAN_LINK_DELAY=0.0000002; HOST_DELAY=0.0000025;  TOPOLOGY_TYPE=\"b4\"; SPERC_CONTROL_TRAFFIC_PC=4; SPERC_HEADROOM_PC=2; SPERC_MAXSAT_TIMEOUT=0.1; SPERC_MAXRTT_TIMEOUT=0.5; SPERC_SYN_RETX_PERIOD_SECONDS=0.2; SPERC_FIXED_RTT_ESTIMATE_AT_HOST=0.1; SPERC_CONTROL_PKT_HDR_BYTES=64; SPERC_DATA_PKT_HDR_BYTES=40; SPERC_INIT_SPERC_DATA_INTERVAL=-1; MATCH_DEMAND_TO_FLOW_SIZE=0; SPERC_PRIO_WORKLOAD=0; SPERC_PRIO_THRESH_INDEX=0; SPERC_WEIGHTED_MAX_MIN_NUM_CLASSES=1; SPERC_JITTER=0; SPERC_UPDATE_IN_REV=0; KW=\"b4-1G-1500B-j0\""    
	# This is a version for running in a data center, see that maxsat_timeout is 20us, max_rtt_timeout is ??, priority
	"LINK_RATE=100; QUEUE_SIZE=83; MEAN_LINK_DELAY=0.0000002; HOST_DELAY=0.0000025; TOPOLOGY_TYPE=\"spine-leaf\";SPERC_CONTROL_TRAFFIC_PC=4; SPERC_HEADROOM_PC=2; SPERC_MAXSAT_TIMEOUT=0.000020; SPERC_MAXRTT_TIMEOUT=0.000100; SPERC_SYN_RETX_PERIOD_SECONDS=0.000040; SPERC_FIXED_RTT_ESTIMATE_AT_HOST=0.000012; SPERC_CONTROL_PKT_HDR_BYTES=64; SPERC_DATA_PKT_HDR_BYTES=40; SPERC_INIT_SPERC_DATA_INTERVAL=-1; MATCH_DEMAND_TO_FLOW_SIZE=0; SPERC_PRIO_WORKLOAD=0; SPERC_PRIO_THRESH_INDEX=0; SPERC_WEIGHTED_MAX_MIN_NUM_CLASSES=1; SPERC_JITTER=0; SPERC_UPDATE_IN_REV=1; KW=\"c4-h2-mt20\""    
    ) ;


# need to set wlog, max_sim_time, log_queues, 
# log_agents
#"${arr[@]}"
for ver in "${versions[@]}" ; do
    # used for rcp queues		    
    eval "$ver"	    ;
    if [ "$SPERC_CONTROL_TRAFFIC_PC" == "0" ]; then echo "couldn't eval and set SPERC_CONTROL_TRAFFIC_PC" ; exit ; fi;

    if [ "${REQUESTED_LINK_RATE}" == "${LINK_RATE}" ] && [ "${REQUESTED_TOPOLOGY_TYPE}" == "${TOPOLOGY_TYPE}" ] && ( [ "${REQUESTED_KW}" == "${KW}" ] ); then 
	# specific to CT
	echo "name is ${UNIQUE_ID}"
	PERC_RUN_INSTANCE="${PERC_RUN_INSTANCES}/${UNIQUE_ID}/run_dir"
	mkdir -p ${PERC_RUN_INSTANCE}

	cp $PERC_RUN_SCRIPTS/*.tcl $PERC_RUN_SCRIPTS/*.sh ${PERC_RUN_INSTANCE}
	cp -rL $PERC_RUN_SCRIPTS/common ${PERC_RUN_INSTANCE}
	cd ${PERC_RUN_INSTANCE}

	echo "in directory .."
	pwd

	sperc_cmd="${SPERC_CONTROL_TRAFFIC_PC} ${SPERC_HEADROOM_PC} ${SPERC_MAXSAT_TIMEOUT} ${SPERC_MAXRTT_TIMEOUT} ${SPERC_SYN_RETX_PERIOD_SECONDS} ${SPERC_FIXED_RTT_ESTIMATE_AT_HOST} ${SPERC_CONTROL_PKT_HDR_BYTES} ${SPERC_DATA_PKT_HDR_BYTES} ${SPERC_INIT_SPERC_DATA_INTERVAL} ${MATCH_DEMAND_TO_FLOW_SIZE} ${SPERC_PRIO_WORKLOAD} ${SPERC_PRIO_THRESH_INDEX} ${SPERC_WEIGHTED_MAX_MIN_NUM_CLASSES} ${SPERC_JITTER} ${SPERC_UPDATE_IN_REV} "
	common_cmd="$SIM_END $LINK_RATE $MEAN_LINK_DELAY $HOST_DELAY $QUEUE_SIZE $LOAD $CONNECTIONS_PER_PAIR $MEAN_FLOW_SIZE $PARETO_SHAPE ${TOPOLOGY_TYPE} ${TOPOLOGY_X} $CDF ${FLOWS_INPUT} ${LOG_QUEUES} ${LOG_AGENTS} ${MAX_SIM_TIME} ${NUM_ACTIVE_SERVERS} ${TRACE_QUEUES} ${EXPERIMENT} ${PKTSIZE} ${QUEUE_SAMPLING_INTVAL} ${FLOW_SIZE_DISTRIBUTION}"

	INSTANCE_RUN_OUT="${UNIQUE_ID}-ns.out"
	INSTANCE_RUN_ERR="${UNIQUE_ID}-ns.err"
	echo "Log (out) start at time: $(date)." > ${INSTANCE_RUN_OUT}
	echo "Log (err) start at time: $(date)." > ${INSTANCE_RUN_ERR}

	cmd="time $PERC_NS2_BINARY sperc.tcl ${common_cmd} ${sperc_cmd} 1>> ${INSTANCE_RUN_OUT} 2>> ${INSTANCE_RUN_ERR}"

	echo $cmd
	eval $cmd 
	cd $DS
    fi ;
done ; # for ver in 	

